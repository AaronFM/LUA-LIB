-------------------------------------------------------------------------------
-- Digital IO network test.
-- @author Pauli
-- @copyright 2014 Rinstrum Pty Ltd
-------------------------------------------------------------------------------

describe("Digital #digital", function ()
    local net = require "tests.network"
    local app, upper, lower

    setup(function()
        app, upper, lower = net.openDevices()
        net.setAsync(app)
        app.init()
    end)

    teardown(function()
        app.system.timers.addEvent(function() app.running = false end)
        app.run()
        net.closeDevices(app)
    end)

    it("timer", function(done)
        app.system.timers.addTimer(0, .1, async(function() done() end))
    end)

    it("all", function(done)
        local cb = spy.new(function() end)

        finally(function()
            upper.turnOff(1, 2, 3, 4, 5, 6)
            upper.releaseOutput(1, 2, 3, 4, 5, 6)
            lower.setAllIOCallback(nil)
        end)

        upper.enableOutput(1, 2, 3, 4, 5, 6)
        upper.turnOff(1, 2, 3, 4, 5, 6)
        app.system.timers.addTimer(0, 0.2, function() lower.setAllIOCallback(cb) end)
        app.system.timers.addTimer(0, 0.3, function() upper.turnOn(4) end)
        app.system.timers.addTimer(0, 0.300000000001, function() upper.turnOn(2) end)
        app.system.timers.addTimer(0, 0.5, function() upper.turnOn(3) end)
        app.system.timers.addTimer(0, 0.9, async(function()
            assert.spy(cb).was.called_with(10)
            assert.spy(cb).was.called_with(14)
            done()
        end))
    end)

    it("toggle", function(done)
        local cb = spy.new(function() end)
        local cb3 = spy.new(function() end)
        local cb4 = spy.new(function() end)

        finally(function()
            upper.turnOff(3, 4)
            upper.releaseOutput(3, 4)
            lower.setAllIOCallback(nil)
            lower.setIOCallback(3, nil)
            lower.setIOCallback(4, nil)
        end)

        lower.releaseOutput(3, 4)
        upper.enableOutput(3, 4)
        upper.turnOff(3, 4)
        app.system.timers.addTimer(0, 0.2, function()
            lower.setAllIOCallback(cb)
            lower.setIOCallback(3, cb3)
            lower.setIOCallback(4, cb4)
        end)

        app.system.timers.addTimer(0, 0.3, function() upper.turnOn(4) end)
        app.system.timers.addTimer(0, 0.45, function() upper.turnOn(3) end)
        app.system.timers.addTimer(0, 0.7, function() upper.turnOff(4) end)
        app.system.timers.addTimer(0, 0.9, async(function()
            assert.spy(cb).was.called_with(8)
            assert.spy(cb).was.called_with(12)
            assert.spy(cb).was.called_with(4)
            assert.spy(cb3).was.called_with(3, true)
            assert.spy(cb4).was.called_with(4, true)
            assert.spy(cb4).was.called_with(4, false)
            done()
        end))
    end)

    it("timed", function(done)
        local cb = spy.new(function() end)

        finally(function()
            upper.turnOff(8)
            upper.releaseOutput(8)
            lower.setIOCallback(8, nil)
        end)

        lower.releaseOutput(8)
        upper.enableOutput(8)
        upper.turnOff(8)
        app.system.timers.addTimer(0, 0.2, function() lower.setIOCallback(8, cb) end)
        app.system.timers.addTimer(0, 0.3, function() upper.turnOnTimed(8, 0.3) end)
        app.system.timers.addTimer(0, 0.9, async(function()
            assert.spy(cb).was.called_with(8, true)
            assert.spy(cb).was.called_with(8, false)
            done()
        end))
    end)

    it("reverse", function(done)
        local cb = spy.new(function() end)

        finally(function()
            lower.turnOff(1)
            lower.releaseOutput(1)
            upper.setIOCallback(1, nil)
        end)

        lower.enableOutput(1)
        lower.turnOff(1)
        app.system.timers.addTimer(0, 0.2, function() upper.setIOCallback(1, cb) end)
        app.system.timers.addTimer(0, 0.3, function() lower.turnOn(1) end)
        app.system.timers.addTimer(0, 0.5, function() lower.turnOff(1) end)
        app.system.timers.addTimer(0, 0.9, async(function()
            assert.spy(cb).was.called_with(1, true)
            assert.spy(cb).was.called_with(1, false)
            done()
        end))
    end)
end)
