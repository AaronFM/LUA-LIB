-------------------------------------------------------------------------------
-- Register unit test.
-- These functions are NOT available inside the rinApp application framework.
-- @author Pauli
-- @copyright 2014 Rinstrum Pty Ltd
-------------------------------------------------------------------------------

local regs = require "tests.registers"

describe("K400Reg #register", function()
    local function makeModule()
        local m, p, d = {}, {}, {}
        require("rinLibrary.utilities")(p)
        require("rinLibrary.K400Reg")(m, p, d)

        regs.populate(p.regPopulate, m, p, d)

        return m, p, d
    end

    it("getRegisterNumber", function()
        local m, p = makeModule()
        assert.equal(m.REG_SERIALNO, p.getRegisterNumber('serialno'))
        assert.equal(m.REG_SYSSTATUS, p.getRegisterNumber(m.REG_SYSSTATUS))
    end)

    it("getRegisterName", function()
        local m, p = makeModule()
        assert.equal('grandtotal', p.getRegisterName('GrandTotal'))
        assert.equal('grossnet', p.getRegisterName(m.REG_GROSSNET))
    end)

    it("registers", function()
        local m, p = makeModule()
        for r, v in pairs({
            absmvv                  = 0x0023,
            active_product_name     = 0xB006,
            active_product_no       = 0xB000,
            adcsample               = 0x0020,
            altgross                = 0x002C,
            altnet                  = 0x002E,
            clr_all_totals          = 0xB002,
            clr_docket_totals       = 0xB004,
            fullscale               = 0x002F,
            grandtotal              = 0x002B,
            gross                   = 0x0026,
            grossnet                = 0x0025,
            keybuffer               = 0x0008,
            lcd                     = 0x0009,
            manhold                 = 0x002A,
            net                     = 0x0027,
            peakhold                = 0x0029,
            rawadc                  = 0x002D,
            select_product_delete   = 0xB011,
            select_product_name     = 0xB010,
            select_product_no       = 0xB00F,
            select_product_rename   = 0xB012,
            serialno                = 0x0005,
            softmodel               = 0x0003,
            softver                 = 0x0004,
            syserr                  = 0x0022,
            sysstatus               = 0x0021,
            tare                    = 0x0028,
            userid1                 = 0x0090,
            userid2                 = 0x0092,
            userid3                 = 0x0093,
            userid4                 = 0x0094,
            userid5                 = 0x0095,
            userid_name1            = 0x0080,
            userid_name2            = 0x0081,
            userid_name3            = 0x0082,
            userid_name4            = 0x0083,
            userid_name5            = 0x0084,
            usernum1                = 0x0310,
            usernum2                = 0x0311,
            usernum3                = 0x0312,
            usernum4                = 0x0313,
            usernum5                = 0x0314,
            usernum_name1           = 0x0316,
            usernum_name2           = 0x0317,
            usernum_name3           = 0x0318,
            usernum_name4           = 0x0319,
            usernum_name5           = 0x031A
        }) do
            assert.equal(v, m['REG_' .. string.upper(r)])   -- depricated way
            assert.equal(v, p.getRegisterNumber(r))
            assert.equal(r, p.getRegisterName(v))
        end
    end)

    it("literalToFloat", function()
        local m, p = makeModule()
        local tests = {
            {   '1234',     1234    },
            {   '- 123.4',  -123.4  },
            {   '+ 543.21', 543.21  },
            {   '0',        0       },
            {   '.1',       .1      },
        }
        for i = 1, #tests do
            it("test "..i, function()
                local t = tests[i]
                local data, result = t[1], t[2]
                assert.approximately(result, p.literalToFloat(data), result * 1e-14)
            end)
        end
    end)

    describe("toFloat", function()
        local m, p = makeModule()
        m.getDispModeDP = function(x) return 3 end
        local tests = {
            {   '1234',     4.66,           nil },
            {   'ff001234', -16772.556,     nil },
            {   'ffffffff', -.0001,         4   },
            {   '80000000', -21474836.48,   2   },
            {   '7fffffff', 214748364.7,    1   },
            {   '0',        0,              0   },
            {   '1',        1,              0   },
            {   '100',      2560,           -1  }
        }
        for i = 1, #tests do
            it("test "..i, function()
                local t = tests[i]
                local data, result, dp = t[1], t[2], t[3]
                assert.approximately(result, p.toFloat(data, dp), result * 1e-12)
            end)
        end
    end)

    it("sendReg", function()
        pending("unimplemented test case")
    end)

    it("sendRegWait", function()
        pending("unimplemented test case")
    end)

    it("readReg", function()
        pending("unimplemented test case")
    end)

    it("writeReg", function()
        pending("unimplemented test case")
    end)

    it("exReg", function()
        pending("unimplemented test case")
    end)
end)
